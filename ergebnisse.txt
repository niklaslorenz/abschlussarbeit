Software-Implementierung:
    theta: 135 32-bit-ops
        5 * 4 xor
        5 xor
        5 rotl 1
        25 xor

    rho pi => 266 32-bit-ops
        1 cpy
        24 copy
        24 rotl x
        24 copy

    chi => 51 64-bit ops = 102 32-bit-ops
        25 copy
        25 neg
        25 and
        25 xor
        1 xor

    rotl(x, i): (64 bit) => 3 64-bit-ops
        x := x << i | x >> (64 - i)

    rotl(xl, xh, i) (32 bit) => 7 32-bit-ops
        th = xl >> (64 - i)
        tl = xh >> (64 - i)
        xh := xh << i | th
        xl := xl << i | tl

    keccak-p => 503 32-bit-ops

    keccak-f => 12072 32-bit-ops; 6036 64-bit-ops

Beschleuniger:
    2004 Takte pro Block

Theoretischer Speedup:
    12072 Takte / 2004 Takte = 6,02
    
Messungen:
    1,6 GHz x86 64-Bit Prozessor: 10.000 Iterationen; 169245 us
    200 MHz icore: 10.000 Iterationen; 15s

Memory Access Factor:
    64-bit-processor: 1,6GHz * 0,169245s / 10000 Iterationen = 27113 Takte / Iteration => S_Mem = 6036 Takte / 27113 Takte = 4,49
    icore: 200 MHz * 15s / 10000 Iterationen = 300000 Takte / Iteration => S_Mem = 300000 Takte / 12072 Takte = 24,85
    
Praktischer Speedup:
    icore: 24,85 * 6,02 = 149,6